{"/home/travis/build/npmtest/node-npmtest-generic-pool/test.js":"/* istanbul instrument in package npmtest_generic_pool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generic-pool/lib.npmtest_generic_pool.js":"/* istanbul instrument in package npmtest_generic_pool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generic_pool = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generic_pool = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generic-pool/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generic-pool && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generic_pool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generic_pool\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generic_pool.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generic_pool.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generic_pool.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generic_pool.__dirname + '/lib.npmtest_generic_pool.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/index.js":"const Pool = require('./lib/Pool')\nconst Deque = require('./lib/Deque')\nconst PriorityQueue = require('./lib/PriorityQueue')\nconst DefaultEvictor = require('./lib/DefaultEvictor')\nmodule.exports = {\n  Pool: Pool, \n  Deque: Deque,\n  PriorityQueue: PriorityQueue,\n  DefaultEvictor: DefaultEvictor,\n  createPool: function(factory, config){\n    return new Pool(DefaultEvictor, Deque, PriorityQueue, factory, config)\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/Pool.js":"'use strict'\n\nconst EventEmitter = require('events').EventEmitter\n\nconst factoryValidator = require('./factoryValidator')\nconst PoolOptions = require('./PoolOptions')\nconst ResourceRequest = require('./ResourceRequest')\nconst ResourceLoan = require('./ResourceLoan')\nconst PooledResource = require('./PooledResource')\n\nconst reflector = require('./utils').reflector\n\n/**\n * TODO: move me\n */\nconst FACTORY_CREATE_ERROR = 'factoryCreateError'\nconst FACTORY_DESTROY_ERROR = 'factoryDestroyError'\n\nclass Pool extends EventEmitter {\n\n  /**\n   * Generate an Object pool with a specified `factory` and `config`.\n   *\n   * @param {Object} factory\n   *   Factory to be used for generating and destroying the items.\n   * @param {Function} factory.create\n   *   Should create the item to be acquired,\n   *   and call it's first callback argument with the generated item as it's argument.\n   * @param {Function} factory.destroy\n   *   Should gently close any resources that the item is using.\n   *   Called before the items is destroyed.\n   * @param {Function} factory.validate\n   *   Test if a resource is still valid .Should return a promise that resolves to a boolean, true if resource is still valid and false\n   *   If it should be removed from pool.\n   */\n  constructor (Evictor, Deque, PriorityQueue, factory, options) {\n    super()\n\n    factoryValidator(factory)\n\n    this._config = new PoolOptions(options)\n\n    // TODO: fix up this ugly glue-ing\n    this._Promise = this._config.Promise\n\n    this._factory = factory\n    this._draining = false\n    this._started = false\n    /**\n     * Holds waiting clients\n     * @type {PriorityQueue}\n     */\n    this._waitingClientsQueue = new PriorityQueue(this._config.priorityRange)\n\n    /**\n     * Collection of promises for resource creation calls made by the pool to factory.create\n     * @type {Set}\n     */\n    this._factoryCreateOperations = new Set()\n\n    /**\n     * Collection of promises for resource destruction calls made by the pool to factory.destroy\n     * @type {Set}\n     */\n    this._factoryDestroyOperations = new Set()\n\n    /**\n     * A queue/stack of pooledResources awaiting acquisition\n     * TODO: replace with LinkedList backed array\n     * @type {Array}\n     */\n    this._availableObjects = new Deque()\n\n    /**\n     * Collection of references for any resource that are undergoing validation before being acquired\n     * @type {Set}\n     */\n    this._testOnBorrowResources = new Set()\n\n    /**\n     * Collection of references for any resource that are undergoing validation before being returned\n     * @type {Set}\n     */\n    this._testOnReturnResources = new Set()\n\n    /**\n     * Collection of promises for any validations currently in process\n     * @type {Set}\n     */\n    this._validationOperations = new Set()\n\n    /**\n     * All objects associated with this pool in any state (except destroyed)\n     * @type {PooledResourceCollection}\n     */\n    this._allObjects = new Set()\n\n    /**\n     * Loans keyed by the borrowed resource\n     * @type {Map}\n     */\n    this._resourceLoans = new Map()\n\n    /**\n     * Infinitely looping iterator over available object\n     * @type {DLLArrayIterator}\n     */\n    this._evictionIterator = this._availableObjects.iterator()\n\n    this._evictor = new Evictor()\n\n    /**\n     * handle for setTimeout for next eviction run\n     * @type {[type]}\n     */\n    this._scheduledEviction = null\n\n    // create initial resources (if factory.min > 0)\n    if (this._config.autostart === true) {\n      this.start()\n    }\n  }\n\n  _destroy (pooledResource) {\n    // FIXME: do we need another state for \"in destruction\"?\n    pooledResource.invalidate()\n    this._allObjects.delete(pooledResource)\n    // NOTE: this maybe very bad promise usage?\n    const destroyPromise = this._factory.destroy(pooledResource.obj)\n    const wrappedDestroyPromise = this._Promise.resolve(destroyPromise)\n\n    this._trackOperation(wrappedDestroyPromise, this._factoryDestroyOperations)\n    .catch((reason) => {\n      this.emit(FACTORY_DESTROY_ERROR, reason)\n    })\n\n    // TODO: maybe ensuring minimum pool size should live outside here\n    this._ensureMinimum()\n  }\n\n  /**\n   * Attempt to move an available resource into test and then onto a waiting client\n   * @return {Boolean} could we move an available resource into test\n   */\n  _testOnBorrow () {\n    if (this._availableObjects.length < 1) {\n      return false\n    }\n\n    const pooledResource = this._availableObjects.shift()\n    // Mark the resource as in test\n    pooledResource.test()\n    this._testOnBorrowResources.add(pooledResource)\n    const validationPromise = this._factory.validate(pooledResource.obj)\n    const wrappedValidationPromise = this._Promise.resolve(validationPromise)\n\n    this._trackOperation(wrappedValidationPromise, this._validationOperations)\n    .then((isValid) => {\n      this._testOnBorrowResources.delete(pooledResource)\n\n      if (isValid === false) {\n        pooledResource.invalidate()\n        this._destroy(pooledResource)\n        this._dispense()\n        return\n      }\n      this._dispatchPooledResourceToNextWaitingClient(pooledResource)\n    })\n\n    return true\n  }\n\n  /**\n   * Attempt to move an available resource to a waiting client\n   * @return {Boolean} [description]\n   */\n  _dispatchResource () {\n    if (this._availableObjects.length < 1) {\n      return false\n    }\n\n    const pooledResource = this._availableObjects.shift()\n    this._dispatchPooledResourceToNextWaitingClient(pooledResource)\n    return\n  }\n\n  /**\n   * Attempt to resolve an outstanding resource request using an available resource from\n   * the pool, or creating new ones\n   *\n   * @private\n   */\n  _dispense () {\n    /**\n     * Local variables for ease of reading/writing\n     * these don't (shouldn't) change across the execution of this fn\n     */\n    const numWaitingClients = this._waitingClientsQueue.length\n\n    // If there aren't any waiting requests then there is nothing to do\n    // so lets short-circuit\n    if (numWaitingClients < 1) {\n      return\n    }\n\n    const resourceShortfall = numWaitingClients - this._potentiallyAllocableResourceCount\n\n    const actualNumberOfResourcesToCreate = Math.min(this.spareResourceCapacity, resourceShortfall)\n    for (let i = 0; actualNumberOfResourcesToCreate > i; i++) {\n      this._createResource()\n    }\n\n    // If we are doing test-on-borrow see how many more resources need to be moved into test\n    // to help satisfy waitingClients\n    if (this._config.testOnBorrow === true) {\n      // how many available resources do we need to shift into test\n      const desiredNumberOfResourcesToMoveIntoTest = numWaitingClients - this._testOnBorrowResources.size\n      const actualNumberOfResourcesToMoveIntoTest = Math.min(this._availableObjects.length, desiredNumberOfResourcesToMoveIntoTest)\n      for (let i = 0; actualNumberOfResourcesToMoveIntoTest > i; i++) {\n        this._testOnBorrow()\n      }\n    }\n\n    // if we aren't testing-on-borrow then lets try to allocate what we can\n    if (this._config.testOnBorrow === false) {\n      const actualNumberOfResourcesToDispatch = Math.min(this._availableObjects.length, numWaitingClients)\n      for (let i = 0; actualNumberOfResourcesToDispatch > i; i++) {\n        this._dispatchResource()\n      }\n    }\n  }\n\n  /**\n   * Dispatches a pooledResource to the next waiting client (if any) else\n   * puts the PooledResource back on the available list\n   * @param  {[type]} pooledResource [description]\n   * @return {[type]}                [description]\n   */\n  _dispatchPooledResourceToNextWaitingClient (pooledResource) {\n    const clientResourceRequest = this._waitingClientsQueue.dequeue()\n    if (clientResourceRequest === undefined) {\n      // While we were away either all the waiting clients timed out\n      // or were somehow fulfilled. put our pooledResource back.\n      this._addPooledResourceToAvailableObjects(pooledResource)\n      // TODO: do need to trigger anything before we leave?\n      return false\n    }\n    const loan = new ResourceLoan(pooledResource, this._Promise)\n    this._resourceLoans.set(pooledResource.obj, loan)\n    pooledResource.allocate()\n    clientResourceRequest.resolve(pooledResource.obj)\n    return true\n  }\n\n  /**\n   * tracks on operation using given set\n   * handles adding/removing from the set and resolve/rejects the value/reason\n   * @param  {Promise} operation\n   * @param  {Set} set       Set holding operations\n   * @return {Promise}       Promise that resolves once operation has been removed from set\n   */\n  _trackOperation (operation, set) {\n    set.add(operation)\n\n    return operation.then((v) => {\n      set.delete(operation)\n      return this._Promise.resolve(v)\n    }, (e) => {\n      set.delete(operation)\n      return this._Promise.reject(e)\n    })\n  }\n\n  /**\n   * @private\n   */\n  _createResource () {\n    // An attempt to create a resource\n    const factoryPromise = this._factory.create()\n    const wrappedFactoryPromise = this._Promise.resolve(factoryPromise)\n\n    this._trackOperation(wrappedFactoryPromise, this._factoryCreateOperations)\n    .then((resource) => {\n      this._handleNewResource(resource)\n      return null\n    })\n    .catch((reason) => {\n      this.emit(FACTORY_CREATE_ERROR, reason)\n      this._dispense()\n    })\n  }\n\n  _handleNewResource (resource) {\n    const pooledResource = new PooledResource(resource)\n    this._allObjects.add(pooledResource)\n    // TODO: check we aren't exceding our maxPoolSize before doing\n    this._dispatchPooledResourceToNextWaitingClient(pooledResource)\n  }\n\n  /**\n   * @private\n   */\n  _ensureMinimum () {\n    if (this._draining === true) {\n      return\n    }\n    const minShortfall = this._config.min - this._count\n    for (let i = 0; i < minShortfall; i++) {\n      this._createResource()\n    }\n  }\n\n  _evict () {\n    const testsToRun = Math.min(this._config.numTestsPerEvictionRun, this._availableObjects.length)\n    const evictionConfig = {\n      softIdleTimeoutMillis: this._config.softIdleTimeoutMillis,\n      idleTimeoutMillis: this._config.idleTimeoutMillis,\n      min: this._config.min\n    }\n    for (let testsHaveRun = 0; testsHaveRun < testsToRun;) {\n      const iterationResult = this._evictionIterator.next()\n\n      // Safety check incase we could get stuck in infinite loop because we\n      // somehow emptied the array after chekcing it's length\n      if (iterationResult.done === true && this._availableObjects.length < 1) {\n        this._evictionIterator.reset()\n        return\n      }\n      // if this happens it should just mean we reached the end of the\n      // list and can reset the cursor.\n      if (iterationResult.done === true && this._availableObjects.length > 0) {\n        this._evictionIterator.reset()\n        break\n      }\n\n      const resource = iterationResult.value\n\n      const shouldEvict = this._evictor.evict(evictionConfig, resource, this._availableObjects.length)\n      testsHaveRun++\n\n      if (shouldEvict === true) {\n        // take it out of the _availableObjects list\n        this._evictionIterator.remove()\n        this._destroy(resource)\n      }\n    }\n  }\n\n  _scheduleEvictorRun () {\n    // Start eviction if set\n    if (this._config.evictionRunIntervalMillis > 0) {\n      this._scheduledEviction = setTimeout(() => {\n        this._evict()\n        this._scheduleEvictorRun()\n      }, this._config.evictionRunIntervalMillis)\n    }\n  }\n\n  _descheduleEvictorRun () {\n    clearTimeout(this._scheduledEviction)\n    this._scheduledEviction = null\n  }\n\n  start () {\n    if (this._draining === true) {\n      return\n    }\n    if (this._started === true) {\n      return\n    }\n    this._started = true\n    this._scheduleEvictorRun()\n    this._ensureMinimum()\n  }\n\n  /**\n   * Request a new resource. The callback will be called,\n   * when a new resource is available, passing the resource to the callback.\n   * TODO: should we add a seperate \"acquireWithPriority\" function\n   *\n   * @param {Function} callback\n   *   Callback function to be called after the acquire is successful.\n   *   If there is an error preventing the acquisition of resource, an error will\n   *   be the first parameter, else it will be null.\n   *   The acquired resource will be the second parameter.\n   *\n   * @param {Number} priority\n   *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority\n   *   of the caller if there are no available resources.  Lower numbers mean higher\n   *   priority.\n   *\n   * @returns {Promise}\n   */\n  acquire (priority) {\n    if (this._draining) {\n      return this._Promise.reject(new Error('pool is draining and cannot accept work'))\n    }\n\n    // TODO: should we defer this check till after this event loop incase \"the situation\" changes in the meantime\n    if (this._config.maxWaitingClients !== undefined && this._waitingClientsQueue.length >= this._config.maxWaitingClients) {\n      return this._Promise.reject(new Error('max waitingClients count exceeded'))\n    }\n\n    const resourceRequest = new ResourceRequest(this._config.acquireTimeoutMillis, this._Promise)\n    this._waitingClientsQueue.enqueue(resourceRequest, priority)\n    this._dispense()\n\n    return resourceRequest.promise\n  }\n\n  /**\n   * Return the resource to the pool when it is no longer required.\n   *\n   * @param {Object} obj\n   *   The acquired object to be put back to the pool.\n   */\n  release (resource) {\n    // check for an outstanding loan\n    const loan = this._resourceLoans.get(resource)\n\n    if (loan === undefined) {\n      return this._Promise.reject(new Error('Resource not currently part of this pool'))\n    }\n\n    this._resourceLoans.delete(resource)\n    loan.resolve()\n    const pooledResource = loan.pooledResource\n\n    pooledResource.deallocate()\n    this._addPooledResourceToAvailableObjects(pooledResource)\n\n    this._dispense()\n    return this._Promise.resolve()\n  }\n\n  /**\n   * Request the resource to be destroyed. The factory's destroy handler\n   * will also be called.\n   *\n   * This should be called within an acquire() block as an alternative to release().\n   *\n   * @param {Object} resource\n   *   The acquired resource to be destoyed.\n   */\n  destroy (resource) {\n    // check for an outstanding loan\n    const loan = this._resourceLoans.get(resource)\n\n    if (loan === undefined) {\n      return this._Promise.reject(new Error('Resource not currently part of this pool'))\n    }\n\n    this._resourceLoans.delete(resource)\n    loan.resolve()\n    const pooledResource = loan.pooledResource\n\n    pooledResource.deallocate()\n    this._destroy(pooledResource)\n\n    this._dispense()\n    return this._Promise.resolve()\n  }\n\n  _addPooledResourceToAvailableObjects (pooledResource) {\n    pooledResource.idle()\n    if (this._config.fifo === true) {\n      this._availableObjects.push(pooledResource)\n    } else {\n      this._availableObjects.unshift(pooledResource)\n    }\n  }\n\n  /**\n   * Disallow any new acquire calls and let the request backlog dissapate.\n   * The Pool will no longer attempt to maintain a \"min\" number of resources\n   * and will only make new resources on demand.\n   * Resolves once all resource requests are fulfilled and all resources are returned to pool and available...\n   * Should probably be called \"drain work\"\n   * @returns {Promise}\n   */\n  drain () {\n    this._draining = true\n    return this.__allResourceRequestsSettled()\n      .then(() => {\n        return this.__allResourcesReturned()\n      })\n      .then(() => {\n        this._descheduleEvictorRun()\n      })\n  }\n\n  __allResourceRequestsSettled () {\n    if (this._waitingClientsQueue.length > 0) {\n      // wait for last waiting client to be settled\n      // FIXME: what if they can \"resolve\" out of order....?\n      return reflector(this._waitingClientsQueue.tail.promise)\n    }\n    return this._Promise.resolve()\n  }\n\n  // FIXME: this is a horrific mess\n  __allResourcesReturned () {\n    const ps = Array.from(this._resourceLoans.values())\n    .map((loan) => loan.promise)\n    .map(reflector)\n    return this._Promise.all(ps)\n  }\n\n  /**\n   * Forcibly destroys all available resources regardless of timeout.  Intended to be\n   * invoked as part of a drain.  Does not prevent the creation of new\n   * resources as a result of subsequent calls to acquire.\n   *\n   * Note that if factory.min > 0 and the pool isn't \"draining\", the pool will destroy all idle resources\n   * in the pool, but replace them with newly created resources up to the\n   * specified factory.min value.  If this is not desired, set factory.min\n   * to zero before calling clear()\n   *\n   */\n  clear () {\n    const reflectedCreatePromises = Array.from(this._factoryCreateOperations)\n    .map(reflector)\n\n    // wait for outstanding factory.create to complete\n    return this._Promise.all(reflectedCreatePromises)\n    .then(() => {\n      // Destroy existing resources\n      for (const resource of this._availableObjects) {\n        this._destroy(resource)\n      }\n      const reflectedDestroyPromises = Array.from(this._factoryDestroyOperations)\n      .map(reflector)\n      return this._Promise.all(reflectedDestroyPromises)\n    })\n  }\n\n  /**\n   * How many resources are available to allocated\n   * (includes resources that have not been tested and may faul validation)\n   * NOTE: internal for now as the name is awful and might not be useful to anyone\n   * @return {Number} number of resources the pool has to allocate\n   */\n  get _potentiallyAllocableResourceCount () {\n    return this._availableObjects.length +\n      this._testOnBorrowResources.size +\n      this._testOnReturnResources.size +\n      this._factoryCreateOperations.size\n  }\n\n  /**\n   * The combined count of the currently created objects and those in the\n   * process of being created\n   * Does NOT include resources in the process of being destroyed\n   * sort of legacy...\n   * @return {Number}\n   */\n  get _count () {\n    return this._allObjects.size + this._factoryCreateOperations.size\n  }\n\n  /**\n   * How many more resources does the pool have room for\n   * @return {Number} number of resources the pool could create before hitting any limits\n   */\n  get spareResourceCapacity () {\n    return this._config.max - (this._allObjects.size + this._factoryCreateOperations.size)\n  }\n\n  /**\n   * see _count above\n   * @return {Number} [description]\n   */\n  get size () {\n    return this._count\n  }\n\n  /**\n   * number of available resources\n   * @return {Number} [description]\n   */\n  get available () {\n    return this._availableObjects.length\n  }\n\n  /**\n   * number of resources that are currently acquired\n   * @return {[type]} [description]\n   */\n  get borrowed () {\n    return this._resourceLoans.size\n  }\n\n  /**\n   * number of waiting acquire calls\n   * @return {[type]} [description]\n   */\n  get pending () {\n    return this._waitingClientsQueue.length\n  }\n\n  /**\n   * maximum size of the pool\n   * @return {[type]} [description]\n   */\n  get max () {\n    return this._config.max\n  }\n\n  /**\n   * minimum size of the pool\n   * @return {[type]} [description]\n   */\n  get min () {\n    return this._config.min\n  }\n}\n\nmodule.exports = Pool\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/factoryValidator.js":"\nmodule.exports = function (factory) {\n  if (typeof factory.create !== 'function') {\n    throw new TypeError('factory.create must be a function')\n  }\n\n  if (typeof factory.destroy !== 'function') {\n    throw new TypeError('factory.destroy must be a function')\n  }\n\n  if (typeof factory.validate !== 'undefined' && typeof factory.validate !== 'function') {\n    throw new TypeError('factory.validate must be a function')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/PoolOptions.js":"'use strict'\n\nconst PoolDefaults = require('./PoolDefaults')\n\nclass PoolOptions {\n  /**\n   * @param {Object} config\n   *   configuration for the pool\n   * @param {Number} config.max\n   *   Maximum number of items that can exist at the same time.  Default: 1.\n   *   Any further acquire requests will be pushed to the waiting list.\n   * @param {Number} config.min\n   *   Minimum number of items in pool (including in-use). Default: 0.\n   *   When the pool is created, or a resource destroyed, this minimum will\n   *   be checked. If the pool resource count is below the minimum, a new\n   *   resource will be created and added to the pool.\n   * @param {Number} config.maxWaitingClients\n   *   maximum number of queued requests allowed after which acquire calls will be rejected\n   * @param {Number} config.acquireTimeoutMillis\n   *   Delay in milliseconds after which the an `acquire` call will fail. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} config.priorityRange\n   *   The range from 1 to be treated as a valid priority\n   * @param {Bool} [config.fifo=true]\n   *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.\n   *   if false then pool has FIFO behaviour\n   * @param {Bool} [config.autostart=true]\n   *   Should the pool start creating resources etc once the constructor is called\n   * @param {Number} opts.evictionRunIntervalMillis\n   *   How often to run eviction checks.  Default: 0 (does not run).\n   * @param {Number} opts.numTestsPerEvictionRun\n   *   Number of resources to check each eviction run.  Default: 3.\n   * @param {Number} opts.softIdleTimeoutMillis\n   *   amount of time an object may sit idle in the pool before it is eligible\n   *   for eviction by the idle object evictor (if any), with the extra condition\n   *   that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n   * @param {Number} opts.idleTimeoutMillis\n   *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction\n   *   due to idle time. Supercedes \"softIdleTimeoutMillis\" Default: 30000\n   * @param {Promise} [config.Promise=Promise]\n   *   What promise implementation should the pool use, defaults to native promises.\n   */\n  constructor (opts) {\n    const poolDefaults = new PoolDefaults()\n\n    opts = opts || {}\n\n    this.fifo = (typeof opts.fifo === 'boolean') ? opts.fifo : poolDefaults.fifo\n    this.priorityRange = opts.priorityRange || poolDefaults.priorityRange\n\n    this.testOnBorrow = (typeof opts.testOnBorrow === 'boolean') ? opts.testOnBorrow : poolDefaults.testOnBorrow\n    this.testOnReturn = (typeof opts.testOnReturn === 'boolean') ? opts.testOnReturn : poolDefaults.testOnReturn\n\n    this.autostart = (typeof opts.autostart === 'boolean') ? opts.autostart : poolDefaults.autostart\n\n    if (opts.acquireTimeoutMillis) {\n      this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10)\n    }\n\n    if (opts.maxWaitingClients) {\n      this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10)\n    }\n\n    this.max = parseInt(opts.max, 10)\n    this.min = parseInt(opts.min, 10)\n\n    this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1)\n    this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max)\n\n    this.evictionRunIntervalMillis = opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis\n    this.numTestsPerEvictionRun = opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun\n    this.softIdleTimeoutMillis = opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis\n    this.idleTimeoutMillis = opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis\n\n    this.Promise = (opts.Promise != null) ? opts.Promise : poolDefaults.Promise\n  }\n}\n\nmodule.exports = PoolOptions\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/PoolDefaults.js":"'use strict'\n/**\n * Create the default settings used by the pool\n *\n * @class\n */\nclass PoolDefaults {\n  constructor () {\n    this.fifo = true\n    this.priorityRange = 1\n\n    this.testOnBorrow = false\n    this.testOnReturn = false\n\n    this.autostart = true\n\n    this.evictionRunIntervalMillis = 0\n    this.numTestsPerEvictionRun = 3\n    this.softIdleTimeoutMillis = -1\n    this.idleTimeoutMillis = 30000\n\n    // FIXME: no defaults!\n    this.acquireTimeoutMillis = null\n    this.maxWaitingClients = null\n\n    this.min = null\n    this.max = null\n    // FIXME: this seems odd?\n    this.Promise = Promise\n  }\n}\n\nmodule.exports = PoolDefaults\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/ResourceRequest.js":"'use strict'\n\nconst Deferred = require('./Deferred')\nconst errors = require('./errors')\n\nfunction fbind (fn, ctx) {\n  return function bound () {\n    return fn.apply(ctx, arguments)\n  }\n}\n\n/**\n * Wraps a users request for a resource\n * Basically a promise mashed in with a timeout\n * @private\n */\nclass ResourceRequest extends Deferred {\n\n  /**\n   * [constructor description]\n   * @param  {Number} ttl     timeout\n   */\n  constructor (ttl, Promise) {\n    super(Promise)\n    this._creationTimestamp = Date.now()\n    this._timeout = null\n\n    if (ttl !== undefined) {\n      this.setTimeout(ttl)\n    }\n  }\n\n  setTimeout (delay) {\n    if (this._state !== ResourceRequest.PENDING) {\n      return\n    }\n    const ttl = parseInt(delay, 10)\n\n    if (isNaN(ttl) || ttl <= 0) {\n      throw new Error('delay must be a positive int')\n    }\n\n    const age = Date.now() - this._creationTimestamp\n\n    if (this._timeout) {\n      this.removeTimeout()\n    }\n\n    this._timeout = setTimeout(fbind(this._fireTimeout, this), Math.max(ttl - age, 0))\n  }\n\n  removeTimeout () {\n    clearTimeout(this._timeout)\n    this._timeout = null\n  }\n\n  _fireTimeout () {\n    this.reject(new errors.TimeoutError('ResourceRequest timed out'))\n  }\n\n  reject (reason) {\n    this.removeTimeout()\n    super.reject(reason)\n  }\n\n  resolve (value) {\n    this.removeTimeout()\n    super.resolve(value)\n  }\n}\n\nmodule.exports = ResourceRequest\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/Deferred.js":"'use strict'\n\n/**\n * This is apparently a bit like a Jquery deferred, hence the name\n */\n\nclass Deferred {\n\n  constructor (Promise) {\n    this._state = Deferred.PENDING\n    this._resolve = undefined\n    this._reject = undefined\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve\n      this._reject = reject\n    })\n  }\n\n  get state () {\n    return this._state\n  }\n\n  get promise () {\n    return this._promise\n  }\n\n  reject (reason) {\n    if (this._state !== Deferred.PENDING) {\n      return\n    }\n    this._state = Deferred.REJECTED\n    this._reject(reason)\n  }\n\n  resolve (value) {\n    if (this._state !== Deferred.PENDING) {\n      return\n    }\n    this._state = Deferred.FULFILLED\n    this._resolve(value)\n  }\n}\n\n// TODO: should these really live here? or be a seperate 'state' enum\nDeferred.PENDING = 'PENDING'\nDeferred.FULFILLED = 'FULFILLED'\nDeferred.REJECTED = 'REJECTED'\n\nmodule.exports = Deferred\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/errors.js":"'use strict'\n\nclass ExtendableError extends Error {\n  constructor (message) {\n    super(message)\n    this.name = this.constructor.name\n    this.message = message\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = (new Error(message)).stack\n    }\n  }\n}\n\n/* eslint-disable no-useless-constructor */\nclass TimeoutError extends ExtendableError {\n  constructor (m) {\n    super(m)\n  }\n}\n/* eslint-enable no-useless-constructor */\n\nmodule.exports = {\n  TimeoutError: TimeoutError\n}\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/ResourceLoan.js":"'use strict'\n\nconst Deferred = require('./Deferred')\n\n/**\n * Plan is to maybe add tracking via Error objects\n * and other fun stuff!\n */\n\nclass ResourceLoan extends Deferred {\n  /**\n   *\n   * @param  {PooledResource} pooledResource the PooledResource this loan belongs to\n   * @return {[type]}                [description]\n   */\n  constructor (pooledResource, Promise) {\n    super(Promise)\n    this._creationTimestamp = Date.now()\n    this.pooledResource = pooledResource\n  }\n\n  reject () {\n    /**\n     * Loans can only be resolved at the moment\n     */\n  }\n}\n\nmodule.exports = ResourceLoan\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/PooledResource.js":"'use strict'\n\nconst PooledResourceStateEnum = require('./PooledResourceStateEnum')\n\n/**\n * @class\n * @private\n */\nclass PooledResource {\n  constructor (resource) {\n    this.creationTime = Date.now()\n    this.lastReturnTime = null\n    this.lastBorrowTime = null\n    this.lastIdleTime = null\n    this.obj = resource\n    this.state = PooledResourceStateEnum.IDLE\n  }\n\n  // mark the resource as \"allocated\"\n  allocate () {\n    this.lastBorrowTime = Date.now()\n    this.state = PooledResourceStateEnum.ALLOCATED\n  }\n\n  // mark the resource as \"deallocated\"\n  deallocate () {\n    this.lastReturnTime = Date.now()\n    this.state = PooledResourceStateEnum.IDLE\n  }\n\n  invalidate () {\n    this.state = PooledResourceStateEnum.INVALID\n  }\n\n  test () {\n    this.state = PooledResourceStateEnum.VALIDATION\n  }\n\n  idle () {\n    this.lastIdleTime = Date.now()\n    this.state = PooledResourceStateEnum.IDLE\n  }\n\n  returning () {\n    this.state = PooledResourceStateEnum.RETURNING\n  }\n}\n\nmodule.exports = PooledResource\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/PooledResourceStateEnum.js":"'use strict'\n\nconst PooledResourceStateEnum = {\n  ALLOCATED: 'ALLOCATED', // In use\n  IDLE: 'IDLE', // In the queue, not in use.\n  INVALID: 'INVALID', // Failed validation\n  RETURNING: 'RETURNING', // Resource is in process of returning\n  VALIDATION: 'VALIDATION' // Currently being tested\n}\n\nmodule.exports = PooledResourceStateEnum\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/utils.js":"'use strict'\n\nfunction noop () {}\n\n/**\n * Reflects a promise but does not expose any\n * underlying value or rejection from that promise.\n * @param  {Promise} promise [description]\n * @return {Promise}         [description]\n */\nexports.reflector = function (promise) {\n  return promise.then(noop, noop)\n}\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/Deque.js":"'use strict'\n\nconst DoublyLinkedList = require('./DoublyLinkedList')\nconst DequeIterator = require('./DequeIterator')\n/**\n * DoublyLinkedList backed double ended queue\n * implements just enough to keep the Pool\n */\nclass Deque {\n  constructor () {\n    this._list = new DoublyLinkedList()\n  }\n\n  /**\n   * removes and returns the first element from the queue\n   * @return {[type]} [description]\n   */\n  shift () {\n    if (this._length === 0) {\n      return undefined\n    }\n\n    const node = this._list.head\n    this._list.remove(node)\n\n    return node.data\n  }\n\n  /**\n   * adds one elemts to the beginning of the queue\n   * @param  {[type]} element [description]\n   * @return {[type]}         [description]\n   */\n  unshift (element) {\n    const node = DoublyLinkedList.createNode(element)\n\n    this._list.insertBeginning(node)\n  }\n\n  /**\n   * adds one to the end of the queue\n   * @param  {[type]} element [description]\n   * @return {[type]}         [description]\n   */\n  push (element) {\n    const node = DoublyLinkedList.createNode(element)\n\n    this._list.insertEnd(node)\n  }\n\n  /**\n   * removes and returns the last element from the queue\n   */\n  pop () {\n    if (this._length === 0) {\n      return undefined\n    }\n\n    const node = this._list.tail\n    this._list.remove(node)\n\n    return node.data\n  }\n\n  [Symbol.iterator] () {\n    return new DequeIterator(this._list)\n  }\n\n  iterator () {\n    return new DequeIterator(this._list)\n  }\n\n  reverseIterator () {\n    return new DequeIterator(this._list, true)\n  }\n\n  /**\n   * get a reference to the item at the head of the queue\n   * @return {element} [description]\n   */\n  get head () {\n    if (this._list.length === 0) {\n      return undefined\n    }\n    const node = this._list.head\n    return node.data\n  }\n\n  /**\n   * get a reference to the item at the tail of the queue\n   * @return {element} [description]\n   */\n  get tail () {\n    if (this._list.length === 0) {\n      return undefined\n    }\n    const node = this._list.tail\n    return node.data\n  }\n\n  get length () {\n    return this._list.length\n  }\n}\n\nmodule.exports = Deque\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/DoublyLinkedList.js":"'use strict'\n\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\nclass DoublyLinkedList {\n  constructor () {\n    this.head = null\n    this.tail = null\n    this.length = 0\n  }\n\n  insertBeginning (node) {\n    if (this.head === null) {\n      this.head = node\n      this.tail = node\n      node.prev = null\n      node.next = null\n      this.length++\n    } else {\n      this.insertBefore(this.head, node)\n    }\n  }\n\n  insertEnd (node) {\n    if (this.tail === null) {\n      this.insertBeginning(node)\n    } else {\n      this.insertAfter(this.tail, node)\n    }\n  }\n\n  insertAfter (node, newNode) {\n    newNode.prev = node\n    newNode.next = node.next\n    if (node.next === null) {\n      this.tail = newNode\n    } else {\n      node.next.prev = newNode\n    }\n    node.next = newNode\n    this.length++\n  }\n\n  insertBefore (node, newNode) {\n    newNode.prev = node.prev\n    newNode.next = node\n    if (node.prev === null) {\n      this.head = newNode\n    } else {\n      node.prev.next = newNode\n    }\n    node.prev = newNode\n    this.length++\n  }\n\n  remove (node) {\n    if (node.prev === null) {\n      this.head = node.next\n    } else {\n      node.prev.next = node.next\n    }\n    if (node.next === null) {\n      this.tail = node.prev\n    } else {\n      node.next.prev = node.prev\n    }\n    node.prev = null\n    node.next = null\n    this.length--\n  }\n\n  // FIXME: this should not live here and has become a dumping ground...\n  static createNode (data) {\n    return {\n      prev: null,\n      next: null,\n      data: data\n    }\n  }\n}\n\nmodule.exports = DoublyLinkedList\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/DequeIterator.js":"'use strict'\n\nconst DoublyLinkedListIterator = require('./DoublyLinkedListIterator')\n/**\n * Thin wrapper around an underlying DDL iterator\n */\nclass DequeIterator extends DoublyLinkedListIterator {\n  next () {\n    const result = super.next()\n\n    // unwrap the node...\n    if (result.value) {\n      result.value = result.value.data\n    }\n\n    return result\n  }\n}\n\nmodule.exports = DequeIterator\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/DoublyLinkedListIterator.js":"'use strict'\n\n/**\n * Creates an interator for a DoublyLinkedList starting at the given node\n * It's internal cursor will remains relative to the last \"iterated\" node as that\n * node moves through the list until it either iterates to the end of the list,\n * or the the node it's tracking is removed from the list. Until the first 'next'\n * call it tracks the head/tail of the linked list. This means that one can create\n * an iterator on an empty list, then add nodes, and then the iterator will follow\n * those nodes. Because the DoublyLinkedList nodes don't track their owning \"list\" and\n * it's highly inefficient to walk the list for every iteration, the iterator won't know\n * if the node has been detached from one List and added to another list, or if the iterator\n *\n * The created object is an es6 compatible iterator\n */\nclass DoublyLinkedListIterator {\n\n  /**\n   * @param  {Object} doublyLinkedListNode a node that is part of a doublyLinkedList\n   * @param  {Boolean} reverse             is this a reverse iterator? default: false\n   */\n  constructor (doublyLinkedList, reverse) {\n    this._list = doublyLinkedList\n    // NOTE: these key names are tied to the DoublyLinkedListIterator\n    this._direction = reverse === true ? 'prev' : 'next'\n    this._startPosition = reverse === true ? 'tail' : 'head'\n    this._started = false\n    this._cursor = null\n    this._done = false\n  }\n\n  _start () {\n    this._cursor = this._list[this._startPosition]\n    this._started = true\n  }\n\n  _advanceCursor () {\n    if (this._started === false) {\n      this._started = true\n      this._cursor = this._list[this._startPosition]\n      return\n    }\n    this._cursor = this._cursor[this._direction]\n  }\n\n  reset () {\n    this._done = false\n    this._started = false\n    this._cursor = null\n  }\n\n  remove () {\n    if (this._started === false || this._done === true || this._isCursorDetached()) {\n      return false\n    }\n    this._list.remove(this._cursor)\n  }\n\n  next () {\n    if (this._done === true) {\n      return { done: true }\n    }\n\n    this._advanceCursor()\n\n    // if there is no node at the cursor or the node at the cursor is no longer part of\n    // a doubly linked list then we are done/finished/kaput\n    if (this._cursor === null || this._isCursorDetached()) {\n      this._done = true\n      return { done: true }\n    }\n\n    return {\n      value: this._cursor,\n      done: false\n    }\n  }\n\n  /**\n   * Is the node detached from a list?\n   * NOTE: you can trick/bypass/confuse this check by removing a node from one DoublyLinkedList\n   * and adding it to another.\n   * TODO: We can make this smarter by checking the direction of travel and only checking\n   * the required next/prev/head/tail rather than all of them\n   * @param  {[type]}  node [description]\n   * @return {Boolean}      [description]\n   */\n  _isCursorDetached () {\n    return this._cursor.prev === null && this._cursor.next === null && this._list.tail !== this._cursor && this._list.head !== this._cursor\n  }\n}\n\nmodule.exports = DoublyLinkedListIterator\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/PriorityQueue.js":"'use strict'\n\nconst Queue = require('./Queue')\n\n/**\n * @class\n * @private\n */\nclass PriorityQueue {\n  constructor (size) {\n    this._size = Math.max(+size | 0, 1)\n    this._slots = []\n    // initialize arrays to hold queue elements\n    for (let i = 0; i < this._size; i++) {\n      this._slots.push(new Queue())\n    }\n  }\n\n  get length () {\n    let _length = 0\n    for (let i = 0, slots = this._slots.length; i < slots; i++) {\n      _length += this._slots[i].length\n    }\n    return _length\n  }\n\n  enqueue (obj, priority) {\n    // Convert to integer with a default value of 0.\n    priority = priority && +priority | 0 || 0\n\n    if (priority) {\n      if (priority < 0 || priority >= this._size) {\n        priority = (this._size - 1)\n        // put obj at the end of the line\n      }\n    }\n    this._slots[priority].push(obj)\n  }\n\n  dequeue () {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length) {\n        return this._slots[i].shift()\n      }\n    }\n    return\n  }\n\n  get head () {\n    for (let i = 0, sl = this._slots.length; i < sl; i += 1) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].head\n      }\n    }\n    return\n  }\n\n  get tail () {\n    for (let i = this._slots.length - 1; i >= 0; i--) {\n      if (this._slots[i].length > 0) {\n        return this._slots[i].tail\n      }\n    }\n    return\n  }\n}\n\nmodule.exports = PriorityQueue\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/Queue.js":"'use strict'\n\nconst DoublyLinkedList = require('./DoublyLinkedList')\nconst Deque = require('./Deque')\n\n/**\n * Sort of a internal queue for holding the waiting\n * resource requets for a given \"priority\".\n * Also handles managing timeouts rejections on items (is this the best place for this?)\n * This is the last point where we know which queue a resourceRequest is in\n *\n */\nclass Queue extends Deque {\n  /**\n   * Adds the obj to the end of the list for this slot\n   * we completely override the parent method because we need access to the\n   * node for our rejection handler\n   * @param {[type]} item [description]\n   */\n  push (resourceRequest) {\n    const node = DoublyLinkedList.createNode(resourceRequest)\n    resourceRequest.promise.catch(this._createTimeoutRejectionHandler(node))\n    this._list.insertEnd(node)\n  }\n\n  _createTimeoutRejectionHandler (node) {\n    return (reason) => {\n      if (reason.name === 'TimeoutError') {\n        this._list.remove(node)\n      }\n    }\n  }\n}\n\nmodule.exports = Queue\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/lib/DefaultEvictor.js":"'use strict'\n\nclass DefaultEvictor {\n  evict (config, pooledResource, availableObjectsCount) {\n    const idleTime = Date.now() - pooledResource.lastIdleTime\n\n    if (config.softIdleTimeoutMillis < idleTime && config.min < availableObjectsCount) {\n      return true\n    }\n\n    if (config.idleTimeoutMillis < idleTime) {\n      return true\n    }\n\n    return false\n  }\n}\n\nmodule.exports = DefaultEvictor\n","/home/travis/build/npmtest/node-npmtest-generic-pool/node_modules/generic-pool/.eslintrc.js":"module.exports = {\n    \"extends\": \"standard\",\n    \"plugins\": [\n        \"standard\"\n    ]\n};"}